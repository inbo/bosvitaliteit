jaarkeuze     <- c(2020)
tweejaarlijks <- c(2019, 2020)
driejaarlijks <- c(2018, 2019, 2020)
meerjaarlijks <- 1995:2020
jaren_natuurindicatoren <- 1987:2020
connect_via_db <- FALSE #zet op TRUE als je de gegevens uit de db wil halen, op FALSE als je de gegevens uit de Rdata bestanden wil halen van een vroegere import
fig_width  <- 7 #standaardbreedte figuur (in inch)
fig_height <- 5 #standaardhoogte figuur (in inch)
fig_dpi <- 300 #standaard dpi figuur
sen_boot <- 50 #aantal bootstrap samples voor de sen slope (liefst 200 of 1000), let op hoe hoger hoe langer het script zal runnen, zet dit op 0 dan zal de bootstrap niet uitgevoerd worden
lmer_boot <- 50 #idem maar voor de lmer bootstrap voor aandeel beschadigde bomen
sen_seed <- 176 #seed voor de bootstrap voor reproduceerbare resultaten (willekeurig getal)
library(RODBC)      #connectie leggen met SQL databank
library(dplyr)      #R code basis voor simpele aggregaties
library(tidyr)      #Data wrangling
library(rlang)      #
library(purrr)      #Ingewikkelde aggregaties
library(ggplot2)    #Figuren
library(stringr)    #functies om tekst te manipuleren
library(lme4)       #
#library(gamm4)      #
library(INBOtheme)  #
library(rkt)        #Sen slope en MannKendall test
library(readr)      #Lezen van en wegschrijven naar tekstbestanden
theme_set(theme_inbo(10))
source("R/functies_db.R")           #data-inleesfuncties
source("R/functies_samenvatting.R") #tabelleringsfuncties
source("R/functies_trend.R") #functies voor de sen en lmer trends
jaarkeuze     <- c(2020)
tweejaarlijks <- c(2019, 2020)
driejaarlijks <- c(2018, 2019, 2020)
meerjaarlijks <- 1995:2020
jaren_natuurindicatoren <- 1987:2020
connect_via_db <- FALSE #zet op TRUE als je de gegevens uit de db wil halen, op FALSE als je de gegevens uit de Rdata bestanden wil halen van een vroegere import
fig_width  <- 7 #standaardbreedte figuur (in inch)
fig_height <- 5 #standaardhoogte figuur (in inch)
fig_dpi <- 300 #standaard dpi figuur
sen_boot <- 50 #aantal bootstrap samples voor de sen slope (liefst 200 of 1000), let op hoe hoger hoe langer het script zal runnen, zet dit op 0 dan zal de bootstrap niet uitgevoerd worden
lmer_boot <- 50 #idem maar voor de lmer bootstrap voor aandeel beschadigde bomen
sen_seed <- 176 #seed voor de bootstrap voor reproduceerbare resultaten (willekeurig getal)
#Tot hier is er USER interactie, de rest zou altijd identiek moeten blijven
#---------------------------------------------------------------------------------------------
###############################
### Bibliotheken en hulpscripts
###############################
library(RODBC)      #connectie leggen met SQL databank
library(dplyr)      #R code basis voor simpele aggregaties
library(tidyr)      #Data wrangling
library(rlang)      #
library(purrr)      #Ingewikkelde aggregaties
library(ggplot2)    #Figuren
library(stringr)    #functies om tekst te manipuleren
library(lme4)       #
#library(gamm4)      #
library(INBOtheme)  #
library(rkt)        #Sen slope en MannKendall test
library(readr)      #Lezen van en wegschrijven naar tekstbestanden
theme_set(theme_inbo(10))
### >>> Hulpscripts
source("R/functies_db.R")           #data-inleesfuncties
source("R/functies_samenvatting.R") #tabelleringsfuncties
source("R/functies_trend.R") #functies voor de sen en lmer trends
#connectiegegevens databank (zelf je login en pwd aanpassen)
#Maak deze file zelf aan als die nog niet bestaat met onderstaande code
#vul zelf wel je windows passwoord in (in plaats van ***windowsAD***)
#in de file zelf zodat deze niet in de code staat
#De data-source moet je zelf nog aanmaken als deze nog niet bestaat:
#open windows startmenu en zoek naar gegevensbronnen (odbc) en open die
#maak de gegevensbron aan via toevoegen ...
#kies SQL-server en druk op voltooien
#1) in het volgende venster vul de naam van de gegensbron in (kan je zelf kiezen,
#   maar zorg dat deze overeenkomt met je dbcredentials.txt)
#   standaard raadt ik D0004_00_Bosvitaliteit aan in de huidige omgeving
#2) geef een beschrijving (zoals bosvitaliteit)
#3) vul de server en poort in. In de huidige omgeving is dit:
#  inbo-sql07-prd.inbo.be,1433 (mogelijks is de ,1433 niet nodig)
#4) druk op volgende en in dit venster kies windows NT verificatie
#   en vink het vinkje onderaan aan en kies je aanmeldingsid geert_sioen
#5) druk op volgende en kies in dit venster een andere standaarddatabase,
#   namelijk D0004_00_Bosvitaliteit
#6) de rest kan je laten staan zoals het is, en je kan ,naar volgende en voltooien
#7) Nu krijg je de gelegenheid de gegevensbron te testen en dat zou moeten werken
#let op, de tekst niet laten inspringen. Op zich is het voldoende enkel de regels
#name;value en data-sorce;D004_00_Bosvitaliteit in te vullen,
#als je de data source met windows NT authentificatie hebt aangemaakt
create_new_credentials <- FALSE
if (create_new_credentials) {
cat("
name;value
server;inbo-sql07-prd.inbo.be
port;1433
login;pieter.verschelde@inbo.be
pwd;***windowsAD***
data-source;D0004_00_Bosvitaliteit",
file = "_DO_NOT_COPY_/dbcredentials.txt", append = FALSE )
}
#onderstaande variabelen worden gebruikt om de tabellen te aggregeren
#    dit is een lijst met de afzonderlijke aggregaties
#    normal_groups bestaat uit 3 afzonderlijke aggregaties,
#    op jaarbasis, per jaar per soorttype, en per jaar per soortindeling
normal_groups    <- list(c("Jaar"),
c("Jaar", "SoortType"),
c("Jaar", "SoortIndeling"))
all_groups       <- list(c("Jaar"),
c("Jaar", "LeeftijdsklasseEur"),
c("Jaar", "SoortType"),
c("Jaar", "SoortIndeling"),
c("Jaar", "LeeftijdsklasseEur", "SoortType"),
c("Jaar", "LeeftijdsklasseEur", "SoortIndeling"))
extended_groups <-  list(c("Jaar"),
c("Jaar", "SoortType"),
c("Jaar", "SoortIndeling"),
c("Jaar", "Soort"))
groups_multiyear <- list(c("Jaar"),
c("Jaar", "LeeftijdsklasseEur"),
c("Jaar", "SoortType"),
c("Jaar", "SoortType", "LeeftijdsklasseEur"),
c("Jaar", "SoortIndeling"))
extra_groups     <- list(c("Jaar"),
c("Jaar", "LeeftijdsklasseEur"),
c("Jaar", "SoortType"),
c("Jaar", "SoortType", "LeeftijdsklasseEur"),
c("Jaar", "SoortIndeling"))
########################
### Inlezen Data uit DB
########################
### >>> Maak connectie met de databank en lees hulpbestanden in
if (connect_via_db) {
#als onderstaande code fout geeft, dan is de connectie niet OK
#dan best aan Pieter of IT vragen
conn <- bosvitaliteit_connect("_DO_NOT_COPY_/dbcredentials.txt")
dfSoortInfo <- read.csv2(file = "data/tree_indeling.csv", stringsAsFactors = FALSE)
if (!is.null(dfSoortInfo) & length(dfSoortInfo))
save(dfSoortInfo, file = "data/dfSoortInfo.Rdata")
dfTrees <- get_treedata(conn, jaar = jaarkeuze) #lees data in via functies_db.R
if (!is.null(dfTrees) & length(dfTrees))
save(dfTrees, file = "data/dfTrees.Rdata")           #bewaar als Rdata bestand (optioneel)
dfSymptoms <- get_symptomdata(conn, jaar = jaarkeuze) #lees data in via functies_db.R
if (!is.null(dfSymptoms) & length(dfSymptoms))
save(dfSymptoms, file = "data/dfSymptoms.Rdata")           #bewaar als Rdata bestand (optioneel)
dfTrees2 <- get_treedata(conn, jaar = tweejaarlijks)
if (!is.null(dfTrees2) & length(dfTrees2))
save(dfTrees2, file = "data/dfTrees2jaarlijks.Rdata")
dfTrees3 <- get_treedata(conn, jaar = driejaarlijks)
if (!is.null(dfTrees3) & length(dfTrees3))
save(dfTrees3, file = "data/dfTrees3jaarlijks.Rdata")
dfTreesTrend <- get_treedata(conn, jaar = meerjaarlijks) %>%
select(Jaar, MetingKey, PlotNr, BoomNr, Soortnummer, Omtrek, Leeftijd, BladverliesNetto,
Zaadzetting, Waterscheuten, Beschadigd, Soort, SoortType, SoortIndeling) %>%
filter(!is.na(BoomNr)) #in 1996 PlotNr 508 waren er geen waarnemingen
if (!is.null(dfTreesTrend) & length(dfTreesTrend))
save(dfTreesTrend, file = "data/dfTreesTrend.Rdata")
odbcCloseAll()
} else {
load("data/dfSoortInfo.Rdata")
load("data/dfTrees.Rdata")
load("data/dfSymptoms.Rdata")
load("data/dfTrees2jaarlijks.Rdata")
load("data/dfTrees3jaarlijks.Rdata")
load("data/dfNatuurindicatoren.Rdata")
load("data/dfTreesTrend.Rdata")
}
####################################
### Basismanipulaties Data
####################################
### >>> Afgeleide datasets
#! SoortselectieVolgorde
dfVolgorde <- dfSoortInfo %>%
select(selectie = SoortIndeling, volgorde = SoortVolgorde) %>%
group_by(selectie) %>%
summarise(volgorde = min(volgorde)) %>%
arrange(volgorde)
#! Soortinfo en Treeinfo combineren
#Let op, er komen hier dubbele bomen voor, wegens verschillende oorzaken,
#maar er kunnen ook duplicaatrijen ontstaan door meerdere aangetaste delen,
#meerdere symptoomspecificaties en meerdere symptoomoorzaken
dfSA <- get_SymptomAnalysisdata(dfTrees, dfSymptoms)
#!Levend, met symptomen
#deze dataset heeft het nadeel dat er duplicaatrijen komen
#als een symptoom meerdere specificaties of oorzaken of organismeoorzaken krijgt)
dfLMS <- filter(dfSA,
Jaar %in% jaarkeuze,
!is.na(OnderdeelBoomCat),
!(AangetastDeelCode %in% c(0,4))) #0 = geen symptoom, #4 is dood
#! Dode bomen
dfDead <- filter(dfSA, Jaar %in% jaarkeuze,  AangetastDeelCode == 4)
#! Voorbereidende totalentabel (gebruikt al een eerste keer bomen_calc)
dfTotaalBomen <-
bomen_calc(dfTrees, normal_groups) %>%
select(selectie, Jaar, TotaalAantalBomen = AantalBomen) %>%
left_join(dfVolgorde, by = "selectie") %>%
arrange(volgorde)
#! Tweejaarlijks
dfTrees2 <-
dfTrees2 %>%
mutate(prbo = paste0(PlotNr, BoomNr))
#!gemeenschappelijke bomen over de 2 jaar
dfTrees2Gmsch <-
inner_join(dfTrees2,
dfTrees2 %>%
group_by(prbo) %>%
summarize(aantal = n()) %>%
filter(aantal == 2),
by = "prbo")
#!Berekening totalen 2-jaarlijks gemeenschappelijk
dfTotaalBomen2J <-
bomen_calc(dfTrees2Gmsch, normal_groups) %>%
select(selectie, Jaar, TotaalAantalBomen = AantalBomen) %>%
left_join(dfVolgorde, by = "selectie") %>%
arrange(volgorde)
#! Toevoegen prbo aan driejaarlijkse data
dfTrees3 <-
dfTrees3 %>%
mutate(prbo = paste0(PlotNr, BoomNr))
#gemeenschappelijke bomen over 3 jaar
gemeenschappelijk3j <-
dfTrees3Gmsch <-
inner_join(dfTrees3,
dfTrees3 %>% group_by(prbo) %>%
summarize(aantal = n()) %>%
filter(aantal == 3),
by = "prbo")
#Berekening totalen 3-jaarlijks gemeenschappelijk
dfTotaalBomen3J <-
bomen_calc(dfTrees3Gmsch, normal_groups) %>%
select(selectie, Jaar, TotaalAantalBomen = AantalBomen) %>%
left_join(dfVolgorde, by = "selectie") %>%
arrange(volgorde)
cat("IMPORTSCRIPT VOLLEDIG UITGEVOERD\n")
#Check of de dataset ingeladen is
if (!exists("DataXJaar")) {
stop("De data is niet geïmporteerd geweest. Is de verplichte code in het masterscript gerund?")
} else {
cat("Dimensies DataXJaar:", nrow(DataXJaar), ncol(DataXJaar), "\n")
}
